// pipeline {
//   agent {
//     docker {
//       image 'sunil/devops-springboot-integration'
//       args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
//     }
//   }
//   stages {
//     stage('Checkout') {
//       steps {
//         sh 'echo passed'
//         //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
//       }
//     }
//     stage('Build and Test') {
//       steps {
//         sh 'ls -ltr'
//         // build the project and create a JAR file
//         sh 'cd java-maven-sonar-argocd-helm-k8s/cicd-demo-springboot && mvn clean package'
//       }
//     }
//     stage('Static Code Analysis') {
//       environment {
//         SONAR_URL = "http://localhost:9000"
//       }
//       steps {
//         withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
//           sh 'cd java-maven-sonar-argocd-helm-k8s/cicd-demo-springboot && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
//         }
//       }
//     }
//     stage('Build and Push Docker Image') {
//       environment {
//         DOCKER_IMAGE = "sunil/devops-springboot-integration:${BUILD_NUMBER}"
//         // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
//         REGISTRY_CREDENTIALS = credentials('docker-cred')
//       }
//       steps {
//         script {
//             sh 'cd java-maven-sonar-argocd-helm-k8s/cicd-demo-springboot && docker build -t ${DOCKER_IMAGE} .'
//             def dockerImage = docker.image("${DOCKER_IMAGE}")
//             docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
//                 dockerImage.push()
//             }
//         }
//       }
//     }
//     stage('Update Deployment File') {
//         environment {
//             GIT_REPO_NAME = "cicd-demo-springboot"
//             GIT_USER_NAME = "sunil-nj"
//         }
//         steps {
//             withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
//                 sh '''
//                     git config user.email "njsunilkumar@gmail.com"
//                     git config user.name "sunil-nj"
//                     BUILD_NUMBER=${BUILD_NUMBER}
//                     sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/cicd-demo-springboot/deployment.yml
//                     git add java-maven-sonar-argocd-helm-k8s/cicd-demo-springboot/deployment.yml
//                     git commit -m "Update deployment image to version ${BUILD_NUMBER}"
//                     git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
//                 '''
//             }
//         }
//     }
//   }
// }

pipeline {
    agent any
    tools{
        maven 'maven_3_5_0'
    }
    stages{
        stage('Build Maven'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/sunil-nj/cicd-demo-springboot.git']]])
                sh 'mvn clean install'
            }
        }
        stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t sunil/devops-springboot-integration .'
                }
            }
        }
        stage('Push image to Hub'){
            steps{
                script{
                   withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerhubpwd')]) {
                   sh 'docker login -u sunil-nj -p ${dockerhubpwd}'

}
                   sh 'docker push sunil/devops-springboot-integration'
                }
            }
        }
        stage('Deploy to k8s'){
            steps{
                script{
                    kubernetesDeploy (configs: 'deployment.yaml',kubeconfigId: 'k8sconfigpwd')
                }
            }
        }
    }
}
// ---------------------

pipeline {

  environment {
    dockerimagename = "sunil/devops-springboot-integration"
    dockerImage = ""
  }
  agent any

    stages {

      stage('Checkout Source') {
        steps {
          git 'https://github.com/sunil-nj/cicd-demo-springboot.git'
        }
      }
      stage('Build image') {
            steps{
              script {
                dockerImage = docker.build dockerimagename
              }
            }
          }

          stage('Pushing Image') {
            environment {
                     registryCredential = 'docker-cred'
                 }
            steps{
              script {
                docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
                  dockerImage.push("latest")
                }
              }
            }
          }
          stage('Deploying App to Kubernetes') {
                steps {
                  script {
                    kubernetesDeploy(configs: "deployment.yml", kubeconfigId: "kubernetes")
                  }
                }
              }

            }

          }
